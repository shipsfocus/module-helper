<?php

namespace Modules\$MODULE$\Http\Controllers;

use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\DB;
use Modules\Base\Response\ApiResponse;
use Modules\$MODULE$\Http\Resources\$RESOURCE_CLASS$;
use Modules\$MODULE$\Services\$SERVICE_CLASS$;
use Spatie\QueryBuilder\AllowedFilter;
use Modules\$MODULE$\Http\Requests\$MODEL$\Store;
use Modules\$MODULE$\Http\Requests\$MODEL$\Update;

class $CONTROLLER_CLASS$ extends Controller
{
    use ApiResponse;

    protected $$MODEL_LOWERCASE$Service;

    public function __construct(
        $SERVICE_CLASS$ $$MODEL_LOWERCASE$Service
    )
    {
        $this->$MODEL_LOWERCASE$Service = $$MODEL_LOWERCASE$Service;
    }

    public function index()
    {
        $builder = $this->$MODEL_LOWERCASE$Service->getModel()->toQueryBuilder()
            ->allowedFilters(
                AllowedFilter::exact('id'),
            )
            ->setPagination();

        return $MODEL$Resource::collection($builder->get())
            ->additional($builder->getPaginationMeta());
    }

    public function store(Store $request)
    {
        DB::beginTransaction();

        try {
            $data = $request->validated();
            $model = $this->$MODEL_LOWERCASE$Service->store($data);

            DB::commit();
        } catch (\Throwable $e) {
            DB::rollback();
            throw $e;
        }

        return $this->respondSuccess('Record Created', new $MODEL$Resource($model));
    }

    public function show($id)
    {
        $model = $this->$MODEL_LOWERCASE$Service->findOrFail($id);

        return new $MODEL$Resource($model);
    }

    public function update(Update $request, $id)
    {
        $this->$MODEL_LOWERCASE$Service->findOrFail($id);

        DB::beginTransaction();

        try {
            $data = $request->validated();

            $model = $this->$MODEL_LOWERCASE$Service->update($id, $data);

            DB::commit();
        } catch(\Throwable $e) {
            DB::rollback();
            throw $e;
        }

        return $this->respondSuccess('Record Updated', new $MODEL$Resource($model->fresh()));
    }

    public function destroy($id)
    {
        $this->$MODEL_LOWERCASE$Service->findOrFail($id);

        DB::beginTransaction();

        try {
            $this->$MODEL_LOWERCASE$Service->delete($id);

            DB::commit();
        } catch (\Throwable $e) {
            DB::rollback();

            throw $e;
        }

        return $this->respondSuccess('Record Deleted');
    }
}
